package io.github.gelihao.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ApplicationContact extends Contract {
    public static final String[] BINARY_ARRAY = {"","513d6020811015610e7b57600080fd5b810190808051906020019092919050505090506001811415610ea05760009650610ec4565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe96505b5b7f42767499ffab62653527a1b68b7c4c2a6832d72c0daaa41eb3a4ece5f5dbf163878d8d8d8d6040518086815260200180602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b83811015610f3d578082015181840152602081019050610f22565b50505050905090810190601f168015610f6a5780820380516001836020036101000a031916815260200191505b50858103845288818151815260200191508051906020019080838360005b83811015610fa3578082015181840152602081019050610f88565b50505050905090810190601f168015610fd05780820380516001836020036101000a031916815260200191505b50858103835287818151815260200191508051906020019080838360005b83811015611009578082015181840152602081019050610fee565b50505050905090810190601f1680156110365780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b8381101561106f578082015181840152602081019050611054565b50505050905090810190601f16801561109c5780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390a186975050505050505050949350505050565b60008060008060006110d2611444565b93508373ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561113857600080fd5b505af115801561114c573d6000803e3d6000fd5b505050506040513d602081101561116257600080fd5b810190808051906020019092919050505092508373ffffffffffffffffffffffffffffffffffffffff1663e8434e3987856040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015611230578082015181840152602081019050611215565b50505050905090810190601f16801561125d5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561127d57600080fd5b505af1158015611291573d6000803e3d6000fd5b505050506040513d60208110156112a757600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561131e57600080fd5b505af1158015611332573d6000803e3d6000fd5b505050506040513d602081101561134857600080fd5b810190808051906020019092919050505060001415611389577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff945061143b565b8173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156113f957600080fd5b505af115801561140d573d6000803e3d6000fd5b505050506040513d602081101561142357600080fd5b81019080805190602001909291905050509050600094505b50505050919050565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600d8152602001807f745f6170706c69636174696f6e00000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156114ee57600080fd5b505af1158015611502573d6000803e3d6000fd5b505050506040513d602081101561151857600080fd5b810190808051906020019092919050505090508092505050905600a165627a7a723058200e7b2834f55a87e4c0b59513c3a4f16ec812b68683dcf98885939940c85f748f0029"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","40518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600a8152602001807f6964656e74696669657200000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015610f0d578082015181840152602081019050610ef2565b50505050905090810190601f168015610f3a5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610f5a57600080fd5b505af1158015610f6e573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663ae763db58b6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018381038352600a8152602001807f627573696e657373696400000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015611032578082015181840152602081019050611017565b50505050905090810190601f16801561105f5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561107f57600080fd5b505af1158015611093573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663664b37d68d86856040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b8381101561118557808201518184015260208101905061116a565b50505050905090810190601f1680156111b25780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156111d357600080fd5b505af11580156111e7573d6000803e3d6000fd5b505050506040513d60208110156111fd57600080fd5b8101908080519060200190929190505050905060018114156112225760009650611246565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe96505b5b7f2ffdcdafb1b1905045b3b985862663058e7eab18bb0caac87c63c140923fea39878d8d8d8d6040518086815260200180602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b838110156112bf5780820151818401526020810190506112a4565b50505050905090810190601f1680156112ec5780820380516001836020036101000a031916815260200191505b50858103845288818151815260200191508051906020019080838360005b8381101561132557808201518184015260208101905061130a565b50505050905090810190601f1680156113525780820380516001836020036101000a031916815260200191505b50858103835287818151815260200191508051906020019080838360005b8381101561138b578082015181840152602081019050611370565b50505050905090810190601f1680156113b85780820380516001836020036101000a031916815260200191505b50858103825286818151815260200191508051906020019080838360005b838110156113f15780820151818401526020810190506113d6565b50505050905090810190601f16801561141e5780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390a186975050505050505050949350505050565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff166359a48b656040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600d8152602001807f745f6170706c69636174696f6e00000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156114ee57600080fd5b505af1158015611502573d6000803e3d6000fd5b505050506040513d602081101561151857600080fd5b810190808051906020019092919050505090508092505050905600a165627a7a7230582010721d6a21a41257157a72c3b427f085bc5da0e0cf95be6b1a7d5387eca9d38d0029"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"identifier\",\"type\":\"string\"},{\"name\":\"businessid\",\"type\":\"string\"},{\"name\":\"editdate\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"identifier\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"businessid\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"editdate\",\"type\":\"string\"}],\"name\":\"RegisterEvent\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_SELECT = "select";

    public static final Event REGISTEREVENT_EVENT = new Event("RegisterEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected ApplicationContact(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt register(String id, String identifier, String businessid, String editdate) {
        final Function function = new Function(
                FUNC_REGISTER,
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(identifier),
                new Utf8String(businessid),
                new Utf8String(editdate)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void register(String id, String identifier, String businessid, String editdate, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER,
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(identifier),
                new Utf8String(businessid),
                new Utf8String(editdate)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String id, String identifier, String businessid, String editdate) {
        final Function function = new Function(
                FUNC_REGISTER,
                Arrays.<Type>asList(new Utf8String(id),
                new Utf8String(identifier),
                new Utf8String(businessid),
                new Utf8String(editdate)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, String> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getRegisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger select(String id) throws ContractException {
        final Function function = new Function(FUNC_SELECT,
                Arrays.<Type>asList(new Utf8String(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List<RegisterEventEventResponse> getRegisterEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTEREVENT_EVENT, transactionReceipt);
        ArrayList<RegisterEventEventResponse> responses = new ArrayList<RegisterEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RegisterEventEventResponse typedResponse = new RegisterEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.identifier = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.businessid = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.editdate = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRegisterEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRegisterEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static ApplicationContact load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ApplicationContact(contractAddress, client, credential);
    }

    public static ApplicationContact deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(ApplicationContact.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class RegisterEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger ret;

        public String id;

        public String identifier;

        public String businessid;

        public String editdate;
    }
}
